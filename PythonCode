import numpy as np
import pandas as pd

from subprocess import check_output
from matplotlib import pyplot as plt

#To load the data
df=pd.read_csv("https://raw.githubusercontent.com/ashinbasheer/10503646.github.io/master/mushrooms.csv")

#Data Understanding
df.describe

#Veil-Type needs to be removed as it has only one value and cannot contribute to the tree
df=df.drop("veil-type",1)  
print(df.columns.values)

#Encoding the labels
from sklearn.preprocessing import LabelEncoder
for attr in df.columns.values:
    X=LabelEncoder().fit_transform(df[attr].values)
    df[attr]=X
y=df["class"].values
x=df.drop("class",1).values

#Splitting in train and test set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)


#Applying the decision tree algorithm
from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier(criterion="entropy")
clf.fit(x_train,y_train)


# Predicting on the test data based on the tree created earlier
y_pred=clf.predict(x_test)


#Print the Accuracy and F-Score of the model
from sklearn import metrics
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("F-Score:",metrics.f1_score(y_test, y_pred))

from sklearn.externals.six import StringIO  
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()

export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True)
				

confusion_matrix=metrics.confusion_matrix(y_test,y_pred)
confusion_matrix


#Printing the decision tree
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
Image(graph.create_png())
